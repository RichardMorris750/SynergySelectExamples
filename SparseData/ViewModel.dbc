;;**********************************************************************
;;
;; Title:       ViewModel.dbc
;;
;; Type:        Class
;;
;; Description: data to UI connector
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;
;; Copyright (c) 2016, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import Symphony.Conductor.ViewModel
import System.Windows
import System.Collections.ObjectModel
import DataObjects

;;need to import the required namespace
import Synergex.SynergyDE.Select
import Symphony.Conductor.Commands

.array 0

namespace SparseData
	
	public class ViewModel extends BaseViewModel
		
		public method ViewModel
			in req sender		,@FrameworkElement
			endparams
			parent(sender)
		proc
			;;ensure we have sample data based installed
			CommonLogic.General.CheckDataInstall()
			;;create the collection bound to the UI
			PartList = new ObservableCollection<Part_Data>()
			
			;;set to return all fields
			FieldList = new List<Boolean>() {true, true, true, true}
			
			performDataLoad()
			
		endmethod
		
		private method performDataLoad, void
			endparams
		proc
			
			PartList.Clear()
			
			;;we are goingt to dynamically define the bind fields
			
			;;see how many fields are selected
			data fieldCount			,i4					,0
			data boolItem	,boolean
			foreach boolItem in FieldList
			begin
				if (boolItem) incr fieldCount
			end
			
			
			;;bind each field
			if (fieldCount)
			begin
				data varArgsCollection	,[#]@VariantDesc
				varArgsCollection = new VariantDesc[fieldCount]
				
				;;define the destination structure
				data item	,STRPart
				
				data pos	,i4	,0
				
				;;define the fields we want to see
				if (FieldList[0])
				begin
					varArgsCollection[pos] = item.str_id
					incr pos
				end
				if (FieldList[1])
				begin
					varArgsCollection[pos] = item.str_Description
					incr pos
				end
				if (FieldList[2])
				begin
					varArgsCollection[pos] = item.str_Quantity
					incr pos
				end
				if (FieldList[3])
				begin
					varArgsCollection[pos] = item.str_Cost_price
					incr pos
				end
				
				;;define the select query
				data selectCommand = new Select(new From("SYMPHONYDATA:parts.ism", item))
				selectCommand.SparseRecord(^varargarray(varArgsCollection))
				
				
				;;perform the select
				foreach item in selectCommand
				begin
					PartList.Add(new Part_Data(item))
				end
			end
		endmethod
		
		;;; <summary>
		;;; Collection that raises "CollectionChanged" events when items in it are added.
		;;; </summary>
		public property PartList, @ObservableCollection<Part_Data>
			method get
			endmethod
			method set
			endmethod
		endproperty
		
		public property FieldList, @List<Boolean>
			method get
			endmethod
			method set
			endmethod
		endproperty
		
		private mPerformSelect	,@GenericCommand
		
		public property PerformSelect, @GenericCommand
			method get
			proc
				if (mPerformSelect == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						performDataLoad()
					end
					mPerformSelect = new GenericCommand("FILTER", doCommand)
				end
				mreturn mPerformSelect
			endmethod
		endproperty
		
		
	endclass
	
endnamespace
